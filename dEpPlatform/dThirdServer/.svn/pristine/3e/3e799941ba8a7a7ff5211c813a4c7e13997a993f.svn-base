package com.third.net.codec;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;
import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.ByteToMessageDecoder;

import java.math.BigDecimal;
import java.nio.ByteBuffer;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.third.config.Global;
import com.third.constant.EpProtocolConstant;
import com.third.net.constant.InnerHead;
import com.third.protocol.WmIce104Util;

/**
 * 收消息，解码
 * 
 * 消息结构：
 * 
 * @author lwz
 * Mar 27, 2015 12:11:06 PM
 */
public class EpGateDecoder extends ByteToMessageDecoder {
	
	
	private static final Logger logger = LoggerFactory.getLogger(EpGateDecoder.class);
	
		
	@Override
	protected void decode(ChannelHandlerContext channelHandlerContext,
			ByteBuf byteBuf, List<Object> list) throws Exception {
		
		String errorMsg="";
		int readableBytes= byteBuf.readableBytes();
		if(readableBytes<7)//如果长度小于长度,不读
		{
		
			logger.debug("decode 1 readableBytes<7,readableBytes:{},channel:{}", readableBytes,channelHandlerContext.channel());


			return;
		}
		
		int pos= byteBuf.bytesBefore(InnerHead.HEAD_FLAG1);//找到的位置
		int pos1= byteBuf.bytesBefore(InnerHead.HEAD_FLAG2);//找到的位置
		int discardLen=0;
		if(pos < 0 || pos1<0 || (pos1-pos)!=1)//没找到，全部读掉
		{
			discardLen = readableBytes;
			logger.debug("decode not find flag header 0x45 0x43,readableBytes:{},channel:{}",readableBytes,channelHandlerContext.channel());
		}
		if(pos>0&&(pos1-pos)==1)
		{
			discardLen = pos;	
			logger.debug("decode  find flag header 0x45 0x43,pos:{},channel:{}",pos,channelHandlerContext.channel());
		}
		if(discardLen>0)
		{
			byte[] dicardBytes= new byte[discardLen];
			byteBuf.readBytes(dicardBytes);//
			
			logger.debug("discard>0 msg:{},channel:{}",WmIce104Util.ConvertHex(dicardBytes, 0),channelHandlerContext.channel());
			
			if(discardLen == readableBytes)
			{
				//没有数据可对，还回
				return;
			}
		}
		
		readableBytes= byteBuf.readableBytes();
		if(readableBytes<7)
		{
			logger.debug("decode readableBytes<7 readableBytes:{},channel:{}",readableBytes,channelHandlerContext.channel());
			
			return;
		}
		
		//1、先标记读索引（必须）
		byteBuf.markReaderIndex();
		
			
		int lengL = byteBuf.readByte()&0x0ff;
		int lengH = byteBuf.readByte()&0x0ff;
	    
		int msg_len = lengL+lengH*0x100;
		
		int remain_len = byteBuf.readableBytes();

		if(remain_len<msg_len )
		{
			logger.debug("ep remain_len<msg_len,remain_len:{},channel:{}", remain_len, channelHandlerContext.channel());
			
				
			byteBuf.resetReaderIndex();
			return ;
		}
		
		int cmdL = byteBuf.readByte()&0x0ff;
		int cmdH = byteBuf.readByte()&0x0ff;
	    
		int cmd = cmdL+cmdH*0x100;
		
		byte Msg[]= null;
		Msg= new byte[msg_len-2];
    	byteBuf.readBytes(Msg);

    	EpMessage message = new EpMessage();
    			
    	message.setLength(msg_len);
    	message.setCmd(cmd);

    	message.setBytes(Msg);
    			
    	list.add(message);
		
	}
	
	public static void decodeLogin(Channel channel,ByteBuffer byteBuffer)
	{
		
	}
	
	public static void decodeAck(Channel channel,ByteBuffer byteBuffer)
	{
		
	}
	public static void decodeYc(Channel channel,ByteBuffer byteBuffer)
	{
		Map<Integer,String> pointMap = new HashMap<Integer,String>();
		int num = (int)byteBuffer.get();
		for(int i=0;i<num;i++)
		{
			short addr = byteBuffer.getShort();
			int value = (int)byteBuffer.get();
		    logger.debug(" yc addr:{},value:{}",addr,value);
		    switch(addr)
		    {
			    case EpProtocolConstant.YC_WORKSTATUS://充电机状态
				case EpProtocolConstant.YC_CAR_PLACE_LOCK: //车位地锁状态
				case EpProtocolConstant.YC_SOC://soc
				case EpProtocolConstant.YC_TOTAL_TIME://累计充电时间
				case EpProtocolConstant.YC_REMAIN_TIME://估计剩余时间
				case EpProtocolConstant.YC_BATTARY_TYPE://电池类型
				case EpProtocolConstant.YC_BATTARY_RATED_CAPACITY://整车动力蓄电池系统额定容量
				case EpProtocolConstant.YC_BATTARY_MAKE_YEAR://电池组生产日期年
				case EpProtocolConstant.YC_BATTARY_MAKE_DATE://电池组生产日期月，日
				case EpProtocolConstant.YC_BATTARY_CHARGE_TIME://电池组充电次数
				case EpProtocolConstant.YC_SIGNLE_BATTRY_HIGH_VOL_GROUP://单体蓄电池最高电压和组号
				{
					String str = ""+value;
					pointMap.put((int)addr,str);
				}
				break;
				case EpProtocolConstant.YC_BATTRY_LOWEST_TEMP://电池组最低温度
				case EpProtocolConstant.YC_BATTRY_HIGHEST_TEMP://电池组最高温度
				case EpProtocolConstant.YC_OUT_VOL://充电机输出电压
				case EpProtocolConstant.YC_A_VOL://A相电压
				case EpProtocolConstant.YC_B_VOL://b相电压
				case EpProtocolConstant.YC_C_VOL://c相电压
				case EpProtocolConstant.YC_OUT_HIGH_VOL://最高输出电压
				case EpProtocolConstant.YC_OUT_LOW_VOL://最低输出电压
				case EpProtocolConstant.YC_CAR_BATTRY_TOTAL_VOL://整车动力电池总电压
				case EpProtocolConstant.YC_EP_TEMPERATURE://电桩内部温度
				case EpProtocolConstant.YC_SIGNLE_BATTRY_CAN_HIGH_VOL://单体蓄电池最高允许充电电压
				case EpProtocolConstant.YC_BATTRY_TOTAL_POWER://动力蓄电池标称总能量
				case EpProtocolConstant.YC_BATTRY_HIGH_VOL://最高允许充电总电压(额定总电压)
				case EpProtocolConstant.YC_BATTRY_CAN_HIGH_TEMP://最高允许温度
				{
					BigDecimal temp = new BigDecimal(value).multiply(Global.Dec1);
					String str = ""+temp.doubleValue();
					pointMap.put((int)addr,str);
				}
				break;
				case EpProtocolConstant.YC_OUT_CURRENT://充电机输出电流
				case EpProtocolConstant.YC_A_CURRENT://A相电流
				case EpProtocolConstant.YC_B_CURRENT://b相电流
				case EpProtocolConstant.YC_C_CURRENT://c相电流
				case EpProtocolConstant.YC_OUT_HIGH_CURRENT://最大输出电流
				case EpProtocolConstant.YC_SIGNLE_BATTRY_HIGH_CURRENT://最高允许充电电流
				{
					BigDecimal temp = new BigDecimal(value).multiply(Global.Dec2);
					String str = ""+temp.doubleValue();
					pointMap.put((int)addr,str);
				}
				break;
				default:
				{
					if(addr>=EpProtocolConstant.YC_CHARGER_MOD_1_OUT_VOL)
					{
						String str;
						int tempAddr = (addr-EpProtocolConstant.YC_CHARGER_MOD_1_OUT_VOL)%9;
					    if(tempAddr==0||tempAddr==2||tempAddr==3||tempAddr==4||tempAddr==8)
					    {
					    	BigDecimal temp = new BigDecimal(value).multiply(Global.Dec1);
					    	str = ""+temp.doubleValue();
						}
						else 
						{
							BigDecimal temp = new BigDecimal(value).multiply(Global.Dec2);
						    str = ""+temp.doubleValue();
					    }
			    	    pointMap.put((int)addr,str);
			    	}
			    }
			    break;

		    }
		}
		
	}
	public static void decodeConsumeRecord(Channel channel,ByteBuffer byteBuffer)
	{
		
	}
		
	/*private static void handleYc(Map<Integer,String> pointMap,InputStream in) 
    {
		if(pointMap ==null)
			return;
		 try
	    {
			 int num = StreamUtil.read(in);
			for(int i=0;i<num;i++)
			{
			   short addr = (short)StreamUtil.readUB2(in);
			   int value =(int)StreamUtil.readUB2(in);
			   logger.debug(" yc addr:{},value:{}",addr,value);
			   switch(addr)
			   {
			    case EpProtocolConstant.YC_WORKSTATUS://充电机状态
			    case EpProtocolConstant.YC_CAR_PLACE_LOCK: //车位地锁状态
			    case EpProtocolConstant.YC_SOC://soc
			    case EpProtocolConstant.YC_TOTAL_TIME://累计充电时间
			    case EpProtocolConstant.YC_REMAIN_TIME://估计剩余时间
			    case EpProtocolConstant.YC_BATTARY_TYPE://电池类型
			    case EpProtocolConstant.YC_BATTARY_RATED_CAPACITY://整车动力蓄电池系统额定容量
			    case EpProtocolConstant.YC_BATTARY_MAKE_YEAR://电池组生产日期年
			    case EpProtocolConstant.YC_BATTARY_MAKE_DATE://电池组生产日期月，日
			    case EpProtocolConstant.YC_BATTARY_CHARGE_TIME://电池组充电次数
			    case EpProtocolConstant.YC_SIGNLE_BATTRY_HIGH_VOL_GROUP://单体蓄电池最高电压和组号
			    {
			    	String str = ""+value;
			    	pointMap.put((int)addr,str);
			    }
			    break;
			    case EpProtocolConstant.YC_BATTRY_LOWEST_TEMP://电池组最低温度
			    case EpProtocolConstant.YC_BATTRY_HIGHEST_TEMP://电池组最高温度
			    case EpProtocolConstant.YC_OUT_VOL://充电机输出电压
			    case EpProtocolConstant.YC_A_VOL://A相电压
			    case EpProtocolConstant.YC_B_VOL://b相电压
			    case EpProtocolConstant.YC_C_VOL://c相电压
			    case EpProtocolConstant.YC_OUT_HIGH_VOL://最高输出电压
			    case EpProtocolConstant.YC_OUT_LOW_VOL://最低输出电压
			    case EpProtocolConstant.YC_CAR_BATTRY_TOTAL_VOL://整车动力电池总电压
			    case EpProtocolConstant.YC_EP_TEMPERATURE://电桩内部温度
			    case EpProtocolConstant.YC_SIGNLE_BATTRY_CAN_HIGH_VOL://单体蓄电池最高允许充电电压
			    case EpProtocolConstant.YC_BATTRY_TOTAL_POWER://动力蓄电池标称总能量
			    case EpProtocolConstant.YC_BATTRY_HIGH_VOL://最高允许充电总电压(额定总电压)
			    case EpProtocolConstant.YC_BATTRY_CAN_HIGH_TEMP://最高允许温度
			    {
			    	BigDecimal temp = new BigDecimal(value).multiply(Global.Dec1);
			    	String str = ""+temp.doubleValue();
			    	pointMap.put((int)addr,str);
			    }
			    break;
			    case EpProtocolConstant.YC_OUT_CURRENT://充电机输出电流
			    case EpProtocolConstant.YC_A_CURRENT://A相电流
			    case EpProtocolConstant.YC_B_CURRENT://b相电流
			    case EpProtocolConstant.YC_C_CURRENT://c相电流
			    case EpProtocolConstant.YC_OUT_HIGH_CURRENT://最大输出电流
			    case EpProtocolConstant.YC_SIGNLE_BATTRY_HIGH_CURRENT://最高允许充电电流
			    {
			    	BigDecimal temp = new BigDecimal(value).multiply(Global.Dec2);
			    	String str = ""+temp.doubleValue();
			    	pointMap.put((int)addr,str);
			    }
			    break;
			    default:
			    {
			    	if(addr>=EpProtocolConstant.YC_CHARGER_MOD_1_OUT_VOL)
			    	{
			    		String str;
			    		int tempAddr = (addr-EpProtocolConstant.YC_CHARGER_MOD_1_OUT_VOL)%9;
			    	    if(tempAddr==0||tempAddr==2||tempAddr==3||tempAddr==4||tempAddr==8)
			    	    {
			    	    	BigDecimal temp = new BigDecimal(value).multiply(Global.Dec1);
			    	    	str = ""+temp.doubleValue();
			    	    }
			    	    else 
			    	    {
			    	    	BigDecimal temp = new BigDecimal(value).multiply(Global.Dec2);
					        str = ""+temp.doubleValue();
			    	    }
			    	    pointMap.put((int)addr,str);
			    	}
			    }
			    break;
			    
			   }
			}
			
        } catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	   }
    }
	
	private static void handleChangeLenYc(Map<Integer,String> pointMap,InputStream in) 
    {
		if(pointMap == null)
			return;
		 try
	    {
			int num = StreamUtil.read(in);
			for (int i = 0; i < num; i++)
			{
				short addr = (short) StreamUtil.readUB2(in);
				byte len = StreamUtil.read(in);
			    
				switch (addr) 
				{
				case EpProtocolConstant.YC_VAR_ACTIVE_TOTAL_METERNUM: // 有功总电度
				case EpProtocolConstant.YC_VAR_CHARGED_METER_NUM:// 已充度数
				{
					int value =(int)StreamUtil.readInt(in);
			    	BigDecimal temp = new BigDecimal(value).multiply(Global.Dec3);
			    	String str = ""+temp.doubleValue();
			    	pointMap.put((int)addr,str);
			    	logger.debug(" ChangeLenYc addr:{},value:{}",addr,value);
				}
				break;
				case EpProtocolConstant.YC_VAR_CHARGED_COST: // 已充金额
				case EpProtocolConstant.YC_VAR_CHARGED_PRICE: // 单价
				{
					int value =(int)StreamUtil.readInt(in);
			    	BigDecimal temp = new BigDecimal(value).multiply(Global.Dec2);
			    	String str = ""+temp.doubleValue();
			    	pointMap.put((int)addr,str);
			    	logger.debug(" ChangeLenYc addr:{},value:{}",addr,value);
				}
				break;
				case EpProtocolConstant.YC_VAR_CAR_VIN: // 车辆识别码
				case EpProtocolConstant.YC_VAR_BATTARY_FACTORY: // 电池厂商
				{
					byte [] val =StreamUtil.readWithLength(in,len);
					String str = StreamUtil.getCString(val);
			    	pointMap.put((int)addr,str);
			    	logger.debug(" ChangeLenYc addr:{},value:{}",addr,str);
				}
				break;
				
				default:
				{
					byte [] val =StreamUtil.readWithLength(in,len);
				}
				break;
				}
			}

		} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	   }
    }
	private static void handleChangeLenYc3(Map<Integer,String> pointMap,InputStream in) 
    {
		if(pointMap == null)
			return;
		 try
	    {
			int num = StreamUtil.read(in);
			for (int i = 0; i < num; i++)
			{
				short addr = (short) StreamUtil.readUB2(in);
				byte len = StreamUtil.read(in);
			    
				switch (addr) 
				{
				case EpProtocolConstant.YC_VAR_ACTIVE_TOTAL_METERNUM+EpProtocolConstant.YX_2_START_POS: // 有功总电度
				case EpProtocolConstant.YC_VAR_CHARGED_METER_NUM+EpProtocolConstant.YX_2_START_POS:// 已充度数
				{
					int value =(int)StreamUtil.readInt(in);
			    	BigDecimal temp = new BigDecimal(value).multiply(Global.Dec3);
			    	String str = ""+temp.doubleValue();
			    	pointMap.put((int)addr,str);
			    	logger.debug(" ChangeLenYc addr:{},value:{}",addr,value);
				}
				break;
				case EpProtocolConstant.YC_VAR_CHARGED_COST+EpProtocolConstant.YX_2_START_POS: // 已充金额
				case EpProtocolConstant.YC_VAR_CHARGED_PRICE+EpProtocolConstant.YX_2_START_POS: // 单价
				{
					int value =(int)StreamUtil.readInt(in);
			    	BigDecimal temp = new BigDecimal(value).multiply(Global.Dec2);
			    	String str = ""+temp.doubleValue();
			    	pointMap.put((int)addr,str);
			    	logger.debug(" ChangeLenYc addr:{},value:{}",addr,value);
				}
				break;
				case EpProtocolConstant.YC_VAR_CAR_VIN+EpProtocolConstant.YX_2_START_POS: // 车辆识别码
				case EpProtocolConstant.YC_VAR_BATTARY_FACTORY+EpProtocolConstant.YX_2_START_POS: // 电池厂商
				{
					byte [] val =StreamUtil.readWithLength(in,len);
					String str = StreamUtil.getCString(val);
			    	pointMap.put((int)addr,str);
			    	logger.debug(" ChangeLenYc addr:{},value:{}",addr,str);
				}
				break;
				case EpProtocolConstant.YC_WORKSTATUS+EpProtocolConstant.YC_START_POS://充电机状态
			    case EpProtocolConstant.YC_CAR_PLACE_LOCK+EpProtocolConstant.YC_START_POS: //车位地锁状态
			    case EpProtocolConstant.YC_SOC+EpProtocolConstant.YC_START_POS://soc
			    case EpProtocolConstant.YC_TOTAL_TIME+EpProtocolConstant.YC_START_POS://累计充电时间
			    case EpProtocolConstant.YC_REMAIN_TIME+EpProtocolConstant.YC_START_POS://估计剩余时间
			    case EpProtocolConstant.YC_BATTARY_TYPE+EpProtocolConstant.YC_START_POS://电池类型
			    case EpProtocolConstant.YC_BATTARY_RATED_CAPACITY+EpProtocolConstant.YC_START_POS://整车动力蓄电池系统额定容量
			    case EpProtocolConstant.YC_BATTARY_MAKE_YEAR+EpProtocolConstant.YC_START_POS://电池组生产日期年
			    case EpProtocolConstant.YC_BATTARY_MAKE_DATE+EpProtocolConstant.YC_START_POS://电池组生产日期月，日
			    case EpProtocolConstant.YC_BATTARY_CHARGE_TIME+EpProtocolConstant.YC_START_POS://电池组充电次数
			    case EpProtocolConstant.YC_SIGNLE_BATTRY_HIGH_VOL_GROUP+EpProtocolConstant.YC_START_POS://单体蓄电池最高电压和组号
			    {
					int value =(int)StreamUtil.readUB2(in);
			    	String str = ""+value;
			    	pointMap.put((int)addr,str);
			    }
			    break;
			    case EpProtocolConstant.YC_BATTRY_LOWEST_TEMP+EpProtocolConstant.YC_START_POS://电池组最低温度
			    case EpProtocolConstant.YC_BATTRY_HIGHEST_TEMP+EpProtocolConstant.YC_START_POS://电池组最高温度
			    case EpProtocolConstant.YC_OUT_VOL+EpProtocolConstant.YC_START_POS://充电机输出电压
			    case EpProtocolConstant.YC_A_VOL+EpProtocolConstant.YC_START_POS://A相电压
			    case EpProtocolConstant.YC_B_VOL+EpProtocolConstant.YC_START_POS://b相电压
			    case EpProtocolConstant.YC_C_VOL+EpProtocolConstant.YC_START_POS://c相电压
			    case EpProtocolConstant.YC_OUT_HIGH_VOL+EpProtocolConstant.YC_START_POS://最高输出电压
			    case EpProtocolConstant.YC_OUT_LOW_VOL+EpProtocolConstant.YC_START_POS://最低输出电压
			    case EpProtocolConstant.YC_CAR_BATTRY_TOTAL_VOL+EpProtocolConstant.YC_START_POS://整车动力电池总电压
			    case EpProtocolConstant.YC_EP_TEMPERATURE+EpProtocolConstant.YC_START_POS://电桩内部温度
			    case EpProtocolConstant.YC_SIGNLE_BATTRY_CAN_HIGH_VOL+EpProtocolConstant.YC_START_POS://单体蓄电池最高允许充电电压
			    case EpProtocolConstant.YC_BATTRY_TOTAL_POWER+EpProtocolConstant.YC_START_POS://动力蓄电池标称总能量
			    case EpProtocolConstant.YC_BATTRY_HIGH_VOL+EpProtocolConstant.YC_START_POS://最高允许充电总电压(额定总电压)
			    case EpProtocolConstant.YC_BATTRY_CAN_HIGH_TEMP+EpProtocolConstant.YC_START_POS://最高允许温度
			    {
			    	int value =(int)StreamUtil.readUB2(in);
			    	BigDecimal temp = new BigDecimal(value).multiply(Global.Dec1);
			    	String str = ""+temp.doubleValue();
			    	pointMap.put((int)addr,str);
			    }
			    break;
			    case EpProtocolConstant.YC_OUT_CURRENT+EpProtocolConstant.YC_START_POS://充电机输出电流
			    case EpProtocolConstant.YC_A_CURRENT+EpProtocolConstant.YC_START_POS://A相电流
			    case EpProtocolConstant.YC_B_CURRENT+EpProtocolConstant.YC_START_POS://b相电流
			    case EpProtocolConstant.YC_C_CURRENT+EpProtocolConstant.YC_START_POS://c相电流
			    case EpProtocolConstant.YC_OUT_HIGH_CURRENT+EpProtocolConstant.YC_START_POS://最大输出电流
			    case EpProtocolConstant.YC_SIGNLE_BATTRY_HIGH_CURRENT+EpProtocolConstant.YC_START_POS://最高允许充电电流
			    {
			    	int value =(int)StreamUtil.readUB2(in);
			    	BigDecimal temp = new BigDecimal(value).multiply(Global.Dec2);
			    	String str = ""+temp.doubleValue();
			    	pointMap.put((int)addr,str);
			    }
			    break;
			    default:
			    {
			    	if(addr>=EpProtocolConstant.YC_CHARGER_MOD_1_OUT_VOL+EpProtocolConstant.YC_START_POS&&
			    			addr<EpProtocolConstant.YX_2_START_POS)
			    	{
			    		int value =(int)StreamUtil.readUB2(in);
			    		String str;
			    		int tempAddr = (addr-EpProtocolConstant.YC_CHARGER_MOD_1_OUT_VOL)%9;
			    	    if(tempAddr==0||tempAddr==2||tempAddr==3||tempAddr==4||tempAddr==8)
			    	    {
			    	    	BigDecimal temp = new BigDecimal(value).multiply(Global.Dec1);
			    	    	str = ""+temp.doubleValue();
			    	    }
			    	    else 
			    	    {
			    	    	BigDecimal temp = new BigDecimal(value).multiply(Global.Dec2);
					        str = ""+temp.doubleValue();
			    	    }
			    	    pointMap.put((int)addr,str);
			    	}
			    	else
			    	{
					   byte [] val =StreamUtil.readWithLength(in,len);
				    }
			    }
			    break;
			    
			   }
			}

		} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	   }
    }
	private static void handleHeart(Channel channel,InputStream in,int revNum) 
    {
		byte[] msg = AnalyzeProtocol.do_heart(revNum);
		AnalyzeMessageSender.sendMessage(channel, msg);
    }
	private static RealData handleData(String epCode,int epGunNo,int epType,int dataType,InputStream in) 
    {
		RealData realData	= new RealData();	
		 try{
			 realData.setEpCode(epCode);
			 realData.setEpGunNo(epGunNo);
			 realData.setEpId(epCode+epGunNo);
			 realData.setEpType(epType);
			 realData.setDataType(dataType-1);
				
			
			Map<Integer,String> pointMap = new ConcurrentHashMap<Integer,String>();
			
			switch(dataType)
			{
			   case 2:
			   case 3:
			   {
				  int num = (int) StreamUtil.read(in);
				for(int i=0;i<num;i++)
			    {
			        short addr = (short)StreamUtil.readUB2(in);
			        int value =(int)StreamUtil.read(in);
			        String str=""+value;
			        pointMap.put((int)addr, str);
			        logger.debug("yx addr:{},value:{}",addr,value);
			    }
		       }
			   break;
			   case 4:
			   {
				handleYc(pointMap,in);
			   }
			   break;
			   case 5:
			   {
				handleChangeLenYc(pointMap,in);
			   }
			   break;
			   case 6:
			   {
				handleChangeLenYc3(pointMap,in);
			   }
			   
			    break;
			  default:
				break;
		   }
			realData.setPointMap(pointMap);
		 }
		 catch(IOException e)
		 {
			 e.printStackTrace();
		 }
		 return realData;	
	}*/
}
