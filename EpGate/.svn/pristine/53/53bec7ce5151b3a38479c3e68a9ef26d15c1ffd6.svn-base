/*
 * Copyright 2012 The Netty Project
 *
 * The Netty Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
package com.epcentre.server;

import static io.netty.handler.codec.http.HttpHeaders.isKeepAlive;
import static io.netty.handler.codec.http.HttpHeaders.Names.CONNECTION;
import static io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_LENGTH;
import static io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_TYPE;
import static io.netty.handler.codec.http.HttpHeaders.Names.COOKIE;
import static io.netty.handler.codec.http.HttpHeaders.Names.SET_COOKIE;
import static io.netty.handler.codec.http.HttpResponseStatus.BAD_REQUEST;
import static io.netty.handler.codec.http.HttpResponseStatus.OK;
import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.handler.codec.DecoderResult;
import io.netty.handler.codec.http.Cookie;
import io.netty.handler.codec.http.CookieDecoder;
import io.netty.handler.codec.http.DefaultFullHttpResponse;
import io.netty.handler.codec.http.FullHttpResponse;
import io.netty.handler.codec.http.HttpContent;
import io.netty.handler.codec.http.HttpHeaders;
import io.netty.handler.codec.http.HttpObject;
import io.netty.handler.codec.http.HttpRequest;
import io.netty.handler.codec.http.LastHttpContent;
import io.netty.handler.codec.http.QueryStringDecoder;
import io.netty.handler.codec.http.ServerCookieEncoder;
import io.netty.util.CharsetUtil;

import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.epcentre.test.ImitateConsumeService;

public class MonitorHttpServerHandler extends SimpleChannelInboundHandler<Object> {
	
	private static final Logger logger = LoggerFactory.getLogger(MonitorHttpServerHandler.class);
	

    private HttpRequest request;
    /** Buffer that stores the response content */
    private final StringBuilder buf = new StringBuilder();

    @Override
    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
        ctx.flush();
    }

    
    protected void messageReceived(ChannelHandlerContext ctx, Object msg) {
        if (msg instanceof HttpRequest) {
            HttpRequest request = this.request = (HttpRequest) msg;
            
            buf.setLength(0);
           
            String uri=request.getUri();
            //buf.append("REQUEST_URI: ").append(uri).append("\r\n\r\n");

            QueryStringDecoder queryStringDecoder = new QueryStringDecoder(request.getUri());
            String path = queryStringDecoder.path();
            switch(path)
            {
            case "/getversion":
            {
            	String retDesc=ImitateConsumeService.get_version(queryStringDecoder);
            	if(retDesc!=null)
            		buf.append(retDesc);
            	
            }
            break;
            case "/connetmonitor":
            {
            	String retDesc=ImitateConsumeService.connetMonitor(queryStringDecoder);
            	if(retDesc!=null)
            		buf.append(retDesc);
            	
            }
            break;
            case "/getmonitorstat":
            {
            	String retDesc=ImitateConsumeService.getMonitorStat(queryStringDecoder);
            	if(retDesc!=null)
            		buf.append(retDesc);
            	
            }
            break;
            case "/getBomList":
            {
            	String retDesc=ImitateConsumeService.getBomList(queryStringDecoder);
            	if(retDesc!=null)
            		buf.append(retDesc);
            	
            }
            break;
            case "/queryversion":
            {
            	String retDesc=ImitateConsumeService.queryVersion(queryStringDecoder);
            	if(retDesc!=null)
            		buf.append(retDesc);
            	
            }
            break;
            case "/setStopCarOrganValid":
            {
            	String retDesc=ImitateConsumeService.setStopCarOrganValid(queryStringDecoder);
            	if(retDesc!=null)
            		buf.append(retDesc);
            	
            }
            break;
            case "/force_update_ep_hex":
            {
            	String retDesc=ImitateConsumeService.force_update_ep_hex(queryStringDecoder);
            	if(retDesc!=null)
            		buf.append(retDesc);
            	
            }
            break;
           
            case "/testDropCarPlace":
            {
            	String retDesc=ImitateConsumeService.testDropCarPlace(queryStringDecoder);
            	if(retDesc!=null)
            		buf.append(retDesc);
            }
            	break;
            case "/testCallEp":
            {
            	String retDesc=ImitateConsumeService.testCallEp(queryStringDecoder);
            	if(retDesc!=null)
            		buf.append(retDesc);
            }
            	break;
            case "/testRateCmd":
            {  
            	String retDesc=ImitateConsumeService.testRateCmd(queryStringDecoder);
            	if(retDesc!=null)
            		buf.append(retDesc);
            }
            break;
            case "/getRate":
            {  
            	String retDesc=ImitateConsumeService.getRatebyId(queryStringDecoder);
            	if(retDesc!=null)
            		buf.append(retDesc);
            }
            break;
            case "/testStartBespoke":
            {
            	String retDesc=ImitateConsumeService.testStartBespoke(queryStringDecoder);
            	if(retDesc!=null)
            		buf.append(retDesc);

            }
            break;  
            case "/testStartBespoke2":
            {
            	String retDesc=ImitateConsumeService.testStartBespoke2(queryStringDecoder);
            	if(retDesc!=null)
            		buf.append(retDesc);

            }
            break;
            
            case "/testStopBespoke":
            {
            	
            	String retDesc=ImitateConsumeService.testStopBespoke(queryStringDecoder);
            	if(retDesc!=null)
            		buf.append(retDesc);
            }
            break;
            case "/testStopBespoke2":
            {
            	
            	String retDesc=ImitateConsumeService.testStopBespoke2(queryStringDecoder);
            	if(retDesc!=null)
            		buf.append(retDesc);
            }
            break;
            case "/testStartCharge":
            {
            	String retDesc=ImitateConsumeService.testStartCharge(queryStringDecoder);
            	if(retDesc!=null)
            		buf.append(retDesc);
            }
            break; 	
            case "/testStartCharge2":
            {
            	String retDesc=ImitateConsumeService.testStartCharge2(queryStringDecoder);
            	if(retDesc!=null)
            		buf.append(retDesc);
            }
            break;
            case "/testStopCharge":
            {
            	
            	String stopDesc=ImitateConsumeService.testStopCharge(queryStringDecoder);
            	if(stopDesc!=null)
            		buf.append(stopDesc);
            	
            }
            break;
            case "/testStopCharge2":
            {
            	
            	String stopDesc=ImitateConsumeService.testStopCharge2(queryStringDecoder);
            	if(stopDesc!=null)
            		buf.append(stopDesc);
            	
            }
            break;
            case "/user":
            {
            	
            	String stopDesc=ImitateConsumeService.findUser(queryStringDecoder);
            	if(stopDesc!=null)
            		buf.append(stopDesc);
            	
            }
            break;
            case "/stat":
            {
            	String stopDesc=ImitateConsumeService.stat(queryStringDecoder);
            	if(stopDesc!=null)
            		buf.append(stopDesc);
           
            }
            break;
            case "/queryCommSignal":
            {
            	String stopDesc=ImitateConsumeService.queryCommSignal(queryStringDecoder);
            	if(stopDesc!=null)
            		buf.append(stopDesc);
           
            }
            break;
            case "/queryConsumeRecord":
            {
            	String stopDesc=ImitateConsumeService.queryConsumeRecord(queryStringDecoder);
            	if(stopDesc!=null)
            		buf.append(stopDesc);
           
            }
            break;
            case "/testCardAuth":
            {
            	String authDesc=ImitateConsumeService.testCardAuth(queryStringDecoder);
            	if(authDesc!=null)
            		buf.append(authDesc);
            }
            
            break;
            case "/createIdentyCode":
            {
            	String stopDesc=ImitateConsumeService.createIdentyCode(queryStringDecoder);
            	if(stopDesc!=null)
            		buf.append(stopDesc);
            }
            break;
            case "/gun_restore":
            {
            	String stopDesc=ImitateConsumeService.gun_restore(queryStringDecoder);
            	if(stopDesc!=null)
            		buf.append(stopDesc);
            }
            break;
            case "/getepdetail":
            {
            	String stopDesc=ImitateConsumeService.getEpDetail(queryStringDecoder);
            	if(stopDesc!=null)
            		buf.append(stopDesc);
            }
            	
            break;
            case "/getstationdetail":
            {
            	String stopDesc=ImitateConsumeService.getStationDetail(queryStringDecoder);
            	if(stopDesc!=null)
            		buf.append(stopDesc);
            }
            	
            break;
            case "/getReal":
            {
            	String stopDesc=ImitateConsumeService.getRealData(queryStringDecoder);
            	if(stopDesc!=null)
            		buf.append(stopDesc);
            }
            	
            break;
            case "/getLastConsumeRecord":
            {
            	String stopDesc=ImitateConsumeService.getLastConsumeRecord(queryStringDecoder);
            	if(stopDesc!=null)
            		buf.append(stopDesc);
            }
            	
            break;
            
            case "/getgundetail":
            {
            	String stopDesc=ImitateConsumeService.getgundetail(queryStringDecoder);
            	if(stopDesc!=null)
            		buf.append(stopDesc);
            }
            	
            break;
            case "/removeCharge":
            {
            	String stopDesc=ImitateConsumeService.removeCharge(queryStringDecoder);
            	if(stopDesc!=null)
            		buf.append(stopDesc);
            }
            break;
            case "/removebesp":
            {
            	String stopDesc=ImitateConsumeService.removeBespoke(queryStringDecoder);
            	if(stopDesc!=null)
            		buf.append(stopDesc);
            }
            	break;
            case "/cleanuser":
            {
            	String stopDesc=ImitateConsumeService.cleanUser(queryStringDecoder);
            	if(stopDesc!=null)
            		buf.append(stopDesc);
            }
            	break;
            case "/addwritelist":
            {
            	String stopDesc=ImitateConsumeService.addwritelist(queryStringDecoder);
            	if(stopDesc!=null)
            		buf.append(stopDesc);
            }
            break;
            case "/removewritelist":
            {
            	String stopDesc=ImitateConsumeService.removewritelist(queryStringDecoder);
            	if(stopDesc!=null)
            		buf.append(stopDesc);
            }
            break;
            case "/openwritelist":
            {
            	String stopDesc=ImitateConsumeService.openwritelist(queryStringDecoder);
            	if(stopDesc!=null)
            		buf.append(stopDesc);
            }
            break;
            
            default:
            	break;
            
            };

            appendDecoderResult(buf, request);
        }

        if (msg instanceof HttpContent) {
            HttpContent httpContent = (HttpContent) msg;

            ByteBuf content = httpContent.content();
            if (content.isReadable()) {
                buf.append("CONTENT: ");
                buf.append(content.toString(CharsetUtil.UTF_8));
                buf.append("\r\n");
                appendDecoderResult(buf, request);
            }

            if (msg instanceof LastHttpContent) {
                LastHttpContent trailer = (LastHttpContent) msg;
                if (!trailer.trailingHeaders().isEmpty()) {
                    buf.append("\r\n");
                 
                    buf.append("\r\n");
                }

                writeResponse(trailer, ctx);
                
               // ctx.channel().close();
             }
        }
    }
    
    private static void appendDecoderResult(StringBuilder buf, HttpObject o) {
        DecoderResult result = o.getDecoderResult();
        if (result.isSuccess()) {
            return;
        }

        buf.append(".. WITH DECODER FAILURE: ");
        buf.append(result.cause());
        buf.append("\r\n");
    }

    private boolean writeResponse(HttpObject currentObj, ChannelHandlerContext ctx) {
        // Decide whether to close the connection or not.
        boolean keepAlive = isKeepAlive(request);
        // Build the response object.
        FullHttpResponse response = new DefaultFullHttpResponse(
                HTTP_1_1, currentObj.getDecoderResult().isSuccess()? OK : BAD_REQUEST,
                Unpooled.copiedBuffer(buf.toString(), CharsetUtil.UTF_8));

        response.headers().set(CONTENT_TYPE, "text/plain; charset=UTF-8");

        if (keepAlive) {
            // Add 'Content-Length' header only for a keep-alive connection.
            response.headers().set(CONTENT_LENGTH, response.content().readableBytes());
            // Add keep alive header as per:
            response.headers().set(CONNECTION, HttpHeaders.Values.KEEP_ALIVE);
        }

        // Encode the cookie.
        String cookieString = request.headers().get(COOKIE);
        if (cookieString != null) {
            Set<Cookie> cookies = CookieDecoder.decode(cookieString);
            if (!cookies.isEmpty()) {
                // Reset the cookies if necessary.
                for (Cookie cookie: cookies) {
                    response.headers().add(SET_COOKIE, ServerCookieEncoder.encode(cookie));
                }
            }
        } else {
            // Browser sent no cookie.  Add some.
            response.headers().add(SET_COOKIE, ServerCookieEncoder.encode("key1", "value1"));
            response.headers().add(SET_COOKIE, ServerCookieEncoder.encode("key2", "value2"));
        }

        // Write the response.
        ctx.write(response);

        return keepAlive;
    }

   
    @Override
    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
    	logger.info("exceptionCaught... test");
        cause.printStackTrace();
        ctx.close();
    }

	@Override
	protected void channelRead0(ChannelHandlerContext arg0, Object arg1)
			throws Exception {
		// TODO Auto-generated method stub
		
	}
}
