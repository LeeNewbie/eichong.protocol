package com.ec.usrcore.service;

import java.math.BigDecimal;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ec.config.Global;
import com.ec.constants.EpConstants;
import com.ec.constants.ErrorCodeConstants;
import com.ec.constants.GunConstants;
import com.ec.constants.Symbol;
import com.ec.constants.UserConstants;
import com.ec.logs.LogConstant;
import com.ec.usrcore.cache.ChargeCache;
import com.ec.usrcore.cache.ElectricPileCache;
import com.ec.usrcore.cache.EpGunCache;
import com.ec.usrcore.cache.UserOrigin;
import com.ec.usrcore.cache.UserRealInfo;
import com.ec.usrcore.config.GameBaseConfig;
import com.ec.usrcore.net.client.EpGateNetConnect;
import com.ec.usrcore.server.CommonServer;
import com.ec.utils.DateUtil;
import com.ec.utils.StringUtil;
import com.ec.utils.WmIce104Util;
import com.ormcore.dao.DB;
import com.ormcore.model.RateInfo;
import com.ormcore.model.TblBespoke;
import com.ormcore.model.TblChargingrecord;
import com.ormcore.model.TblElectricPileGun;

public class EpChargeService {
	
	private static final Logger logger = LoggerFactory.getLogger(EpChargeService.class + Symbol.SPLIT + GameBaseConfig.layerName);
	
	public static boolean isValidAddress(int address,int type)
	{
		//logger.debug("into isValidAddress address:{},type:{}",address,type);
		boolean ret= true;
		switch(type)
		{
		case 1:
		{
			if(address>=13 && address <=16)//保留
			{
				ret= false;
			}
			else if(address> 21)//保留
			{
				ret= false;
			}
		}
		break;
		case 3:
		{
			if(address>=5 && address <=8)//保留
			{
				ret= false;
			}
			else if(address> 16)//保留
			{
				ret= false;
			}
		}
		break;
		case 11:
		{
			if(address>8 && address <=16)//保留
			{
				ret= false;
			}
			else if(address>=37 && address <=40)//保留
			{
				ret = false;
			}
			else if(address>=50 && address <=128)//保留
			{
				ret = false;
			}
			
			
		}
		break;
		case 132:
		{
			if(address>=5 && address <=8)//保留
			{
				ret= false;
			}
			else if(address>=11)//保留
			{
				 ret= false;
			}
		}
		break;
		default:
			ret= false;
			break;
		}
		
		//logger.debug("isValidAddress ret:{}",ret);
		return ret;
		
	}
	
	
	public static ChargeCache convertFromDb(TblChargingrecord tblChargeRecord)
	{
		if(tblChargeRecord ==null)
			return null;
		ChargeCache chargeCache = new ChargeCache();
	
		chargeCache.setSt(tblChargeRecord.getChreStartdate().getTime()/1000);
		
		chargeCache.setStatus(tblChargeRecord.getStatus());
		
		
		//chargeCache.setAccount(tblChargeRecord.getUserPhone());
		chargeCache.setBespNo(tblChargeRecord.getChreBeginshowsnumber());
		chargeCache.setChargeSerialNo(tblChargeRecord.getChreTransactionnumber());
		
		chargeCache.setChOrCode(tblChargeRecord.getChreCode());
		
		chargeCache.setUserId(tblChargeRecord.getUserId());
		chargeCache.setPkUserCard(tblChargeRecord.getPkUserCard());
		if(chargeCache.getPkUserCard() !=0)
		{
			chargeCache.setStartChargeStyle((short)EpConstants.CHARGE_TYPE_CARD);
		}
		else
		{
			chargeCache.setStartChargeStyle((short)EpConstants.CHARGE_TYPE_QRCODE);
		}
		
		
		BigDecimal value= tblChargeRecord.getFrozenAmt().multiply(Global.DecTime2);
		chargeCache.setFronzeAmt(value.intValue());
		chargeCache.setPayMode(tblChargeRecord.getPayMode());
		
		UserOrigin userOrigin = new UserOrigin(tblChargeRecord.getUserOrgNo(),1,"");
		chargeCache.setUserOrigin(userOrigin);
		
		RateInfo rateInfo = new RateInfo();
		rateInfo.setJ_Rate(tblChargeRecord.getJPrice());
		rateInfo.setF_Rate(tblChargeRecord.getFPrice());
		rateInfo.setP_Rate(tblChargeRecord.getPPrice());
		rateInfo.setG_Rate(tblChargeRecord.getGPrice());
		rateInfo.setG_Rate(tblChargeRecord.getGPrice());
		rateInfo.setQuantumDate(tblChargeRecord.getQuantumDate());
		
		chargeCache.setRateInfo(rateInfo);
		
		return chargeCache;
	}
	
	public static ChargeCache GetUnFinishChargeCache(String epCode,int epGunNo)
	{
		TblChargingrecord tblQueryChargeRecord= new TblChargingrecord();
		tblQueryChargeRecord.setChreUsingmachinecode(epCode);
		
		tblQueryChargeRecord.setChreChargingnumber(epGunNo);
		
		List<TblChargingrecord> chargeList = DB.chargingrecordDao.getUnFinishedCharge(tblQueryChargeRecord);
		logger.debug("chargeList count:{}",chargeList.size());
		TblChargingrecord tblChargeRecord=null;
		if (chargeList != null && chargeList.size() > 0) {
			tblChargeRecord = chargeList.get(0);
		}
		
		if(tblChargeRecord==null)
			return null;
		
		return convertFromDb(tblChargeRecord);
	}
	
	public static int getChargeOrderStatus(String serialNo)
	{
		String ret = DB.chargeOrderDao.getOrderStatus(serialNo);
		return (ret==null)?-1:Integer.parseInt(ret);
	}
	
	public static ChargeCache GetChargeCacheFromDb(String serialNo)
	{
		TblChargingrecord tblChargeRecord=null;
		String chreTransactionnumber = serialNo;
		List<TblChargingrecord> chargeList = DB.chargingrecordDao.getByTranNumber(chreTransactionnumber);
		logger.debug("chargeList count:{}",chargeList.size());
		if (chargeList != null && chargeList.size() > 0) {
			tblChargeRecord = chargeList.get(0);
		}
		
		if(tblChargeRecord==null)
			return null;
		
		return convertFromDb(tblChargeRecord);
	}
	
	/**
	 * 参数检查
	 * @param epCode
	 * @param account
	 * @return
	 */
	private static int checkElectricDb(int orgNo,String epCode, int epGunNo, String account, short startChargeStyle)
	{
		int accountId = UserService.findUserId(orgNo, account);
		if (accountId==0) {
			logger.info("apiStartElectric,orgNo:{},account:{}",orgNo,account);
			return ErrorCodeConstants.INVALID_ACCOUNT;
		}
		if (orgNo != UserConstants.ORG_I_CHARGE) {
			UserRealInfo userRealInfo = UserService.findUserRealInfo(accountId);
			if (null == userRealInfo) {
				return ErrorCodeConstants.INVALID_ACCOUNT;
			}
		}
		int error = UserService.canCharge(accountId);
		if (error > 0) return error;

		List<TblChargingrecord> chargeList;
		if (orgNo == UserConstants.ORG_I_CHARGE) {
			chargeList = DB.chargingrecordDao.getChargeByUser(accountId);
		} else {
			TblChargingrecord tblchargingrecord = new TblChargingrecord();
			tblchargingrecord.setUserId(accountId);
			tblchargingrecord.setThirdUsrIdentity(account);
			chargeList = DB.chargingrecordDao.getChargeByThirdUser(tblchargingrecord);
		}
		if (chargeList != null && chargeList.size() > 0) {
			return ErrorCodeConstants.EPE_REPEAT_CHARGE;
		}
		
		//检查电桩
		ElectricPileCache epCache = EpService.getEpCache(epCode,epGunNo);
		if (epCache == null) return ErrorCodeConstants.EP_UNCONNECTED;
		error = EpService.checkEpCache(epCache);
		if (error > 0) return error;
		EpGateNetConnect commClient = CacheService.getEpGate(epCache.getGateid());
		error = EpService.checkEpGate(commClient);
		if (error > 0) return error;

		if(epGunNo<1|| epGunNo> epCache.getGunNum())
		{
			return ErrorCodeConstants.INVALID_EP_GUN_NO;
		}
		int currentType = epCache.getCurrentType();
		if(currentType!=EpConstants.EP_DC_TYPE && currentType!= EpConstants.EP_AC_TYPE)
		{
			logger.error("init error!invalid current type:{}",currentType);
			return ErrorCodeConstants.EPE_CHARGE_STYLE;
		}

		TblElectricPileGun tblEpGun= EpGunService.getDbEpGun(epCache.getPkEpId(),epGunNo);
		if(tblEpGun==null)
		{
			logger.error("init error!did not find gun,pkEpId:{},epGunNo:{}",epCache.getPkEpId(),epGunNo);
			return ErrorCodeConstants.INVALID_EP_GUN_NO;
		}
		if(tblEpGun.getEpState() ==  GunConstants.EP_GUN_STATUS_SETTING)
		{
			return ErrorCodeConstants.EPE_IN_EP_OPER;//
		}
		if(tblEpGun.getEpState() == GunConstants.EP_GUN_STATUS_EP_OPER && startChargeStyle == EpConstants.CHARGE_TYPE_QRCODE)
		{
			logger.debug("epGunCache.getStatus():{},startChargeStyle:{}",tblEpGun.getEpState(),startChargeStyle);
			return ErrorCodeConstants.EPE_IN_EP_OPER;//
		}
		if(tblEpGun.getEpState() ==  GunConstants.EP_GUN_STATUS_EP_UPGRADE)
		{
			return ErrorCodeConstants.EP_UPDATE;//
		}
		if(tblEpGun.getEpState()>30)
		{
			return ErrorCodeConstants.EPE_GUN_FAULT;//
		}
		//2.取最新的预约中的预约记录
		TblBespoke besp = EpBespokeService.getUnStopBespokeFromDb(epCache.getPkEpId(), tblEpGun.getPkEpGunId());
		if (besp != null && besp.getUserid() != accountId) {
			return ErrorCodeConstants.EPE_OTHER_BESP;
		}
		//3.取最新的未完成的充电记录
		ChargeCache tmpChargeCache=EpChargeService.GetUnFinishChargeCache(epCode, epGunNo);
		if(tmpChargeCache!=null)
		{
			return ErrorCodeConstants.USED_GUN;
		}

		return 0;
	}

	/**
	 * api开始充电
	 * @param epCode
	 * @param epGunNo
	 * @param accountId
	 * @param account
	 * @param bespNo
	 * @param ermFlag
	 * @param appClientIp
	 * @param frozenAmt
	 * @param source,但来自于爱充的用户需要收费，来自于其他合作伙伴有可能不冻结钱.只记录充电和消费记录
	 * @return
	 */
	public static int apiStartElectric(String token,int orgNo,String userIdentity,String epCode,int epGunNo,
			short startChargeStyle,int chargingAmt,int payMode, int watchPrice,
			String carCode, String vinCode)
	{
		//1.电桩编号长度不对，不能充电
		if(epCode.length() !=16)
		{
			return ErrorCodeConstants.INVALID_EP_CODE;
		}
		
		int error = checkElectricDb(orgNo,epCode, epGunNo, userIdentity, startChargeStyle);
		
		if (error > 0) return error;

		EpGunCache epGunCache = CacheService.getEpGunCache(epCode, epGunNo);
		
		int errorCode = epGunCache.startChargeAction(token, orgNo, userIdentity,epCode, epGunNo, startChargeStyle, chargingAmt,
				payMode, watchPrice, carCode, vinCode);
		
		if (errorCode>0) return errorCode;
		
		return 0;
	}
	public static int apiStopElectric(String token,int orgNo,String userIdentity,String epCode,int epGunNo)
	{
		if(epCode.length() !=16)
		{
			return ErrorCodeConstants.INVALID_EP_CODE;
		}
		
		//检查电桩
		ElectricPileCache epCache = CacheService.getEpCache(epCode);
		if(epCache == null)
		{
			return ErrorCodeConstants.EP_UNCONNECTED;
		}

		EpGateNetConnect commClient = CacheService.getEpGate(epCache.getGateid());
		int error = EpService.checkEpGate(commClient);
		if (error > 0) return error;
		
		if(epGunNo<1|| epGunNo> epCache.getGunNum())
		{
			return ErrorCodeConstants.INVALID_EP_GUN_NO;
		}
		
		EpGunCache epGunCache= CacheService.getEpGunCache(epCode, epGunNo);
		//桩断线，不能结束充电
 		if(epGunCache ==null )
		{
			
			return ErrorCodeConstants.EP_UNCONNECTED;
		}
		
		return epGunCache.stopChargeAction(token,orgNo,userIdentity,commClient);
	}

	public static int initClientConnect(String token,int orgNo,String userIdentity,
			String epCode, int epGunNo, String checkCode) {

		// 查电桩
		ElectricPileCache epCache = EpService.getEpCache(epCode,epGunNo);

		int error = EpService.checkEpCache(epCache);
		if (error > 0) return error;

		EpGateNetConnect commClient = CacheService.getEpGate(epCache.getGateid());
		error = EpService.checkEpGate(commClient);
		if (error > 0) return error;

		EpGunCache epGunCache = CacheService.getEpGunCache(epCode, epGunNo);
		if (epGunCache == null) {
			return ErrorCodeConstants.EP_UNCONNECTED;
		}

		UserRealInfo userRealInfo = UserService.findUserRealInfo(Integer.valueOf(userIdentity));
		if (null == userRealInfo) {
			return ErrorCodeConstants.INVALID_ACCOUNT;
		}
		token = userRealInfo.getAccount();
		error = UserService.canCharge(Integer.valueOf(userIdentity));

		String chargeGun = epCode + epGunNo;
		error = UserService.checkUserGun(userRealInfo.getId(), chargeGun);
		if (error > 0) {
			return error;
		}

		// 验证码
		String src = userRealInfo.getDeviceid() + userRealInfo.getPassword()
				+ userRealInfo.getId();
		String calcCheckCode = WmIce104Util.MD5Encode(src.getBytes());

		if (calcCheckCode.compareTo(checkCode) != 0) {
			logger.info(StringUtil.addBaseLog("checkCode","calcCheckCode"),
					new Object[]{StringUtil.getIpAddress(),CommonServer.getInstance().getSeverType()
					,LogConstant.FUNC_PHONE_INIT,"fail",epCode,epGunNo,orgNo,userIdentity,checkCode,calcCheckCode});
			return ErrorCodeConstants.ERROR_PHONE_CRC_CODE;
		}

		if (epGunCache.getStatus() == GunConstants.EP_GUN_STATUS_CHARGE) {
			if (epGunCache.getChargeCache() != null
					&& epGunCache.getChargeCache().getUserId() != 0
					&& epGunCache.getChargeCache().getUserId() != userRealInfo.getId()) {
				return ErrorCodeConstants.EPE_OTHER_CHARGING;
			}
		}
		if (epGunCache.getStatus() == GunConstants.EP_GUN_STATUS_BESPOKE_LOCKED) {
			if (epGunCache.getBespCache() == null
					|| epGunCache.getBespCache().getAccountId() != userRealInfo.getId()) {
				return ErrorCodeConstants.EPE_OTHER_BESP;
			}
		}
		if (epGunCache.getStatus() == GunConstants.EP_GUN_STATUS_USER_AUTH) {
			if (epGunCache.getChargeCache() != null
					&& epGunCache.getChargeCache().getUserId() != userRealInfo.getId()) {
				return ErrorCodeConstants.USED_GUN;
			}
		}

		commClient.setLastSendTime(DateUtil.getCurrentSeconds());
		EpGateService.sendClientConnect(commClient.getChannel(),epCode,epGunNo,userRealInfo.getId());

		return 0;
	}
	
	public static int queryOrderInfo(String token,int orgNo,String userIdentity,String epCode,int epGunNo)
	{
		if(epCode.length() !=16)
		{
			return ErrorCodeConstants.INVALID_EP_CODE;
		}
		
		//检查电桩
		ElectricPileCache epCache = EpService.getEpCache(epCode,epGunNo);
		if(epCache == null)
		{
			return ErrorCodeConstants.EP_UNCONNECTED;
		}

		EpGateNetConnect commClient = CacheService.getEpGate(epCache.getGateid());
		int error = EpService.checkEpGate(commClient);
		if (error > 0) return error;
		
 		commClient.setLastSendTime(DateUtil.getCurrentSeconds());
 		EpGateService.sendOrderInfo(commClient.getChannel(), epCode, epGunNo, orgNo, userIdentity, token);
		return 0;
	}
	
	public static int phoneDisconnect(int orgNo,String userIdentity,String epCode,int epGunNo)
	{
		//检查电桩
		ElectricPileCache epCache = EpService.getEpCache(epCode,epGunNo);
		if(epCache == null)
		{
			logger.debug("phoneDisconnect errorCode:{}", ErrorCodeConstants.EP_UNCONNECTED);
			return ErrorCodeConstants.EP_UNCONNECTED;
		}
		EpGunService.unUseEpGun(epCode, epGunNo, orgNo, userIdentity);

		EpGateNetConnect commClient = CacheService.getEpGate(epCache.getGateid());
		int error = EpService.checkEpGate(commClient);
		if (error > 0) {
			logger.debug("phoneDisconnect errorCode:{}", error);
			return error;
		}
		
 		commClient.setLastSendTime(DateUtil.getCurrentSeconds());
 		EpGateService.sendClientOnline(commClient.getChannel(), Integer.valueOf(userIdentity), 0);
		return 0;
	}
}
	
