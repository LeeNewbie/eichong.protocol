package com.ec.phonegate.service;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ec.constants.Symbol;
import com.ec.phonegate.client.PhoneClient;
import com.ec.phonegate.config.GameConfig;
import com.ec.phonegate.proto.PhoneConstant;
import com.ec.phonegate.proto.PhoneProtocol;
import com.ec.phonegate.sender.PhoneMessageSender;
import com.ec.usrcore.server.IEventCallBack;
import com.ec.utils.NetUtils;

public class CallBackService implements IEventCallBack {

	private final Logger logger = LoggerFactory.getLogger(CallBackService.class + Symbol.SPLIT + GameConfig.serverName);

	/**
	 * 手机连接应答（usrGate->phone）
	 */
	public void onCanUseEp(int orgNo,String userIdentity,String epCode,int epGunNo,String account,int ret,int errorCode,int status,int currentType) {
		logger.info("send phoneConnect epCode:{},epGunNo:{},accountId:{},ret:{},errorCode:{},status:{},currentType:{}",new Object[]{epCode,epGunNo,userIdentity,ret,errorCode,status,currentType});

		PhoneClient phoneClient = CachePhoneService.getPhoneClientByAccountId(Integer.valueOf(userIdentity));
		if (phoneClient == null) {
			logger.error("send phoneConnect phoneClient == null");
			return;
		} else {
			phoneClient.setAccount(account);
			phoneClient.setIdentity(account);
		}

		if (ret == 1) {
			PhoneService.sendEPMessage(phoneClient.getChannel(), (short)phoneClient.getCmd(), ret, errorCode, status, currentType);
			phoneClient.setConnectFlg(true);
		} else {
			PhoneService.sendEPMessage(phoneClient.getChannel(), (short)phoneClient.getCmd(), ret, errorCode, 0, 0);
		}
	}

	/**
	 * 充电事件（usrGate->phone）
	 */
	public void onChargeEvent(int orgNo,String userIdentity,String epCode,int epGunNo,String extra,int status) {
		logger.info("send phone charge epCode:{},epGunNo:{},accountId:{},status:{}",new Object[]{epCode,epGunNo,userIdentity,status});

		PhoneClient phoneClient = CachePhoneService.getPhoneClientByAccountId(Integer.valueOf(userIdentity));
		if (phoneClient == null) {
			logger.error("send phone charge phoneClient == null");
			return;
		}

		byte[] data = PhoneProtocol.do_start_charge_event(status);

		PhoneMessageSender.sendMessage(phoneClient.getChannel(), data);
	}

	/**
	 * 充电应答（usrGate->phone）
	 */
	public void onStartCharge(int orgNo,String userIdentity,String epCode,int epGunNo,String extra,int ret,int errorCode) {
		logger.info("send phone charge epCode:{},epGunNo:{},accountId:{},ret:{},errorCode:{}",new Object[]{epCode,epGunNo,userIdentity,ret,errorCode});

		PhoneClient phoneClient = CachePhoneService.getPhoneClientByAccountId(Integer.valueOf(userIdentity));
		if (phoneClient == null) {
			logger.error("send phone charge phoneClient == null");
			return;
		}

		PhoneService.sendMessage(phoneClient.getChannel(), PhoneConstant.D_START_CHARGE, ret, errorCode);
	}

	/**
	 * 停止充电应答（usrGate->phone）
	 */
	public void onStopCharge(int orgNo,String userIdentity,String epCode,int epGunNo,String extra,int ret,int errorCode) {
		logger.info("send phone stopCharge epCode:{},epGunNo:{},accountId:{},ret:{},errorCode:{}",new Object[]{epCode,epGunNo,userIdentity,ret,errorCode});

		PhoneClient phoneClient = CachePhoneService.getPhoneClientByAccountId(Integer.valueOf(userIdentity));
		if (phoneClient == null) {
			logger.error("send phone stopCharge phoneClient == null");
			return;
		}

		PhoneService.sendMessage(phoneClient.getChannel(), PhoneConstant.D_STOP_CHARGE, ret, errorCode);
	}

	public void onQueryOrderInfo(int orgNo,String userIdentity,String epCode,int epGunNo,String extra,int ret,int errorCode) {
	}

	/**
	 * 充电实时数据（usrGate->phone）
	 */
	public void onRealData(int orgNo,String userIdentity,String epCode,int epGunNo,String extra,Map<String ,Object> realData) {
		logger.info("send phone charge realData epCode:{},epGunNo:{},accountId:{},extraData:{}",new Object[]{epCode,epGunNo,userIdentity,realData});

		PhoneClient phoneClient = CachePhoneService.getPhoneClientByAccountId(Integer.valueOf(userIdentity));
		if (phoneClient == null) {
			logger.error("send phone charge phoneClient == null");
			return;
		}

		byte[] data = PhoneProtocol.do_real_charge_info(realData);
		PhoneMessageSender.sendMessage(phoneClient.getChannel(), data);
	}

	/**
	 * 消费记录（usrGate->phone）
	 */
	public void onChargeOrder(int orgNo,String userIdentity,String epCode,int epGunNo,String extra,Map<String ,Object> data) {
		logger.info("send phone consumeRecord epCode:{},epGunNo:{},accountId:{},extraData:{}",new Object[]{epCode,epGunNo,userIdentity,data});

		PhoneClient phoneClient = CachePhoneService.getPhoneClientByAccountId(Integer.valueOf(userIdentity));
		if (phoneClient == null) {
			logger.error("send phone consumeRecord phoneClient == null");
			return;
		}

		String chargeOrder = (String) data.get("orderNo");
		long lst = (long) data.get("st");
		long let = (long) data.get("et");

		int st = (int) lst;
		int et = (int) let;

		int totalMeterNum = (int) data.get("elect");
		int totalAmt = (int) data.get("elect_money");
		int serviceAmt = (int) data.get("service_money");
		int pkEpId = (int) data.get("pkEpId");

		int version = phoneClient.getVersion();
		int couPonAmt = 0;
		int userFirst = 0;
		int realCouPonAmt = 0;
		if(version>=2)
		{
			couPonAmt = (int) data.get("New_conpon");
			userFirst = (int) data.get("Conpon_face_value");
			realCouPonAmt = (int) data.get("Conpon_discount_value");
		}
		
		byte[] extraData = PhoneProtocol.do_consume_record((short)version,chargeOrder,st,et,totalMeterNum,totalAmt,serviceAmt,
				pkEpId,userFirst,couPonAmt,realCouPonAmt);

		PhoneMessageSender.sendRepeatMessage(phoneClient.getChannel(), extraData, chargeOrder, phoneClient.getVersion());
	}

	/**
	 * 枪与车连接状态变化通知事件（usrGate->phone）
	 */
	public void onGunLinkStatusChange(int orgNo,String userIdentity,String epCode,int epGunNo,String extra,int status) {
		logger.info("send gunlink status charge epCode:{},epGunNo:{},accountId:{},status:{}",new Object[]{epCode,epGunNo,userIdentity,status});

		PhoneClient phoneClient = CachePhoneService.getPhoneClientByAccountId(Integer.valueOf(userIdentity));
		if (phoneClient == null) {
			logger.error("send gunlink status charge phoneClient == null");
			return;
		}

		byte[] hmsTime = NetUtils.timeToByte();
		int gunStatus = status;
		gunStatus +=1;
		byte[] data = PhoneProtocol.do_gun2car_status(gunStatus, PhoneConstant.D_GUN_CAR_STATUS, hmsTime);

		String messagekey = userIdentity + PhoneConstant.D_GUN_CAR_STATUS;

		PhoneMessageSender.sendRepeatMessage(phoneClient.getChannel(), data, messagekey, phoneClient.getVersion());
	}

	/**
	 * 枪工作状态变化通知事件（usrGate->phone）
	 */
	public void onGunWorkStatusChange(int orgNo,String userIdentity,String epCode,int epGunNo,String extra,int status) {
		logger.info("send gunwork status charge epCode:{},epGunNo:{},accountId:{},status:{}",new Object[]{epCode,epGunNo,userIdentity,status});

		PhoneClient phoneClient = CachePhoneService.getPhoneClientByAccountId(Integer.valueOf(userIdentity));
		if (phoneClient == null) {
			logger.error("send gunwork status charge phoneClient == null");
			return;
		}

		byte[] hmsTime = NetUtils.timeToByte();
		byte[] data = PhoneProtocol.do_gun2car_status(status, PhoneConstant.D_GUN_WORK_STATUS, hmsTime);

		String messagekey = userIdentity + PhoneConstant.D_GUN_WORK_STATUS;

		PhoneMessageSender.sendRepeatMessage(phoneClient.getChannel(), data, messagekey, phoneClient.getVersion());
	}
}
