package com.third.service;

import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.jdom.Element;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.netCore.conf.CoreConfig;
import com.third.config.EpGateConfig;
import com.third.config.ThirdConfig;
import com.third.config.ThirdConfigs;
import com.third.constant.BaseConstant;

public class ThirdConfigService
{
    private static final Logger initConfigLog = LoggerFactory.getLogger("InitConfigLog");

    public ThirdConfigService()
    {
    }
    public static ThirdConfigs initThirdConfigs()
    {
        initConfigLog.info("开始初始化第三方服务配置...");

        ThirdConfigs thirdConfigs = new ThirdConfigs();
        Element root = CoreConfig.getRootElement("third-config.xml");

        List<?> elementList = root.getChildren();
        Iterator<?> i$ = elementList.iterator();
        do
        {
            if(!i$.hasNext())
                break;
            Element e = (Element)i$.next();
            if(e != null)
            {
            	Map<String, EpGateConfig> mapEpGate = new ConcurrentHashMap<String, EpGateConfig>();
            	Map<String, ThirdConfig> mapThird = initThirdConfig(e, mapEpGate);

                String key = e.getName();
                if(key != null && key.length() > 0 && mapThird != null)
                {
                	thirdConfigs.putThird(key, mapThird);
                	thirdConfigs.putEpGate(key, mapEpGate);
                }
            }
        } while(true);

        initConfigLog.info("初始化第三方服务配置结束...配置信息:【{}】", new Object[] {thirdConfigs.toString()});
        return thirdConfigs;
	}

    private static Map<String, ThirdConfig> initThirdConfig(Element e, Map<String, EpGateConfig> map)
    {
    	Map<String, ThirdConfig> mapthird = new ConcurrentHashMap<String, ThirdConfig>();
        List<?> elementList = e.getChildren();
        Iterator<?> i$ = elementList.iterator();
        do
        {
            if(!i$.hasNext())
                break;
            Element child = (Element)i$.next();
            if(child != null)
            {
            	initEpGateConfig(child, map);

            	String id = child.getName();

	            ThirdConfig thirdConfig = new ThirdConfig();
	            String dataformat = child.getChild("dataformat").getValue();
	            String value = child.getChild("value").getValue();

	            thirdConfig.setDataformat(dataformat);
	            thirdConfig.setValue(value);

                if(id != null && id.length() > 0)
                	mapthird.put(id, thirdConfig);
            }
        } while(true);

        initConfigLog.info((new StringBuilder()).append("初始化第三方服务配置:【").append(map.toString()).append("】").toString());

        return mapthird;
	}

    private static void initEpGateConfig(Element e, Map<String, EpGateConfig> map)
    {
        List<?> elementList = e.getChildren();
        Iterator<?> i$ = elementList.iterator();
        do
        {
            if(!i$.hasNext())
                break;
            Element child = (Element)i$.next();
            if(e != null)
            {
	            String id = child.getName();
	            if (id != null && id.length() > 0 && (id == "dataformat" || id == "value")) break;

	            EpGateConfig epgateConfig = new EpGateConfig();
	            String type = child.getChild("type").getValue();
	            String addr = child.getChild("addr").getValue();

	            epgateConfig.setType(type);
	            epgateConfig.setAddr(addr);

            	map.put(id, epgateConfig);
            	map.put(type + BaseConstant.SPLIT + addr, epgateConfig);
            }
        } while(true);

        initConfigLog.info((new StringBuilder()).append("初始化第三方服务配置:【").append(map.toString()).append("】").toString());
	}
}