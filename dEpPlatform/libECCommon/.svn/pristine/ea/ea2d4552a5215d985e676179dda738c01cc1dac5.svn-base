package com.ec.utils;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Objects;
import java.util.Random;

import org.apache.commons.lang.StringUtils;

import com.ec.constants.Symbol;
import com.ec.logs.LogConstants;

public class StringUtil {

	public static String repeat(String src, int num) {
		StringBuffer s = new StringBuffer();
		for (int i = 0; i < num; i++)
			s.append(src);
		return s.toString();
	}

	public static String divF(byte[] bytes) {
		StringBuffer s = new StringBuffer();
		for (int i = 0; i < bytes.length; i++) {
			if ((bytes[i] & 0x0FF) == 255) {
				break;
			}

			s.append(bytes[i]);
		}
		return s.toString();
	}

	public static String getRandomString(int length) {
		String str = "ABCDEFGHIGKLMNOPQRSTUVWXYZ0123456789";
		Random random = new Random();
		StringBuffer sf = new StringBuffer();
		for (int i = 0; i < length; i++) {
			int number = random.nextInt(36);// 0~61
			sf.append(str.charAt(number));
		}
		return sf.toString();
	}

	public static String getByteString(byte[] src) {
		String s = new String(src);
		return s;

	}

	public static String getCString(byte[] src) {
		int pos = -1;
		int len = src.length;
		for (int i = 0; i < len; i++) {
			if (src[i] == 0) {
				pos = i + 1;
				break;
			}
		}
		if (pos == -1)
			return "";

		byte[] dest = new byte[pos - 1];
		System.arraycopy(src, 0, dest, 0, pos - 1);
		String s = new String(dest);
		return s;
	}

	public static String getAscii(byte[] src) {
		int pos = -1;
		int len = src.length;
		for (int i = 0; i < len; i++) {
			if (src[i] == 0) {
				pos = i + 1;
				break;
			}
			if (src[i] < 0x20 || src[i] > 0x7e) {
				return " ";
			}
		}
		if (pos == -1)
			return "";

		byte[] dest = new byte[pos - 1];
		System.arraycopy(src, 0, dest, 0, pos - 1);
		String s = new String(dest);
		s.trim();
		return s;
	}

	public static String getString(Object str) {
		if (str == null)
			return "";

		return str.toString();
	}

	public static String getIpAddress() {
		InetAddress localhost;
		String ipAddress = StringUtils.EMPTY;
		try {
			localhost = InetAddress.getLocalHost();
			ipAddress = localhost.getHostAddress();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}

		return ipAddress;
	}

	public static String addBaseLog(String param1, String param2) {

		String str = addLog(getUsrBaseLog(), param1);
		str = addLog(str, param2);

		return str;
	}

	public static String addExtLog(String param) {
		String[] str = param.split(Symbol.SHUXIAN_REG);

		return addLog(getBaseLog(), str);
	}

	public static String addBaseExtLog() {
		return addLog(getBaseLog(), new String[]{});
	}

	public static String addBaseExtLog(String param) {
		String[] str = param.split(Symbol.SHUXIAN_REG);

		return addLog(getBaseLog(), str);
	}

	public static String addExtLog() {
		return addLog(getMethodLog(), new String[]{});
	}

	public static String addExtLog(String[] param) {
		return addLog(getMethodLog(), param);
	}

	public static String getMethodLog() {
		StackTraceElement[] tmp = new Throwable().getStackTrace();
		if (tmp.length < 1) return StringUtils.EMPTY;

		String base = tmp[tmp.length - 1].getMethodName();

		String str = base + Symbol.HALF_BLANK;
		
		return str;
	}

	public static String getBaseLog() {
		StackTraceElement[] tmp = new Throwable().getStackTrace();
		if (tmp.length < 1) return StringUtils.EMPTY;

		String str = getMethodLog();

		String className = tmp[tmp.length - 1].getClassName();
		if (className.indexOf("usrcore") > 0) {
			str += getUsrBaseLog();
		} else if (className.indexOf("epcore") > 0) {
			str += getEPBaseLog();
		} else if (className.indexOf("phonegate") > 0) {
			str += getUsrBaseLog();
		} else if (className.indexOf("cooperate") > 0) {
			str += getCOBaseLog();
		}

		return str;
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public static String getUsrBaseLog() {

		List names = new ArrayList<String>();

		names.add(addBase("user gate"));
		names.add(addBase("severType"));
		names.add(addBase("cmd"));
		names.add(addBase("ret"));
		names.add(addBase("epcode"));
		names.add(addBase("gunno"));
		names.add(addBase("orgno"));
		names.add(addBase("userIdentity"));

		return join(Symbol.DOUHAO, names);
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public static String getEPBaseLog() {

		List names = new ArrayList<String>();

		names.add(addBase("ep gate"));
		names.add(addBase("cmd"));
		names.add(addBase("ret"));
		names.add(addBase("epcode"));
		names.add(addBase("gunno"));
		names.add(addBase("orgno"));
		names.add(addBase("userIdentity"));

		return join(Symbol.DOUHAO, names);
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public static String getCOBaseLog() {

		List names = new ArrayList<String>();

		names.add(addBase("cmd"));
		names.add(addBase("epcode"));
		names.add(addBase("gunno"));
		names.add(addBase("orgno"));
		names.add(addBase("userIdentity"));
		names.add(addBase("token"));

		return join(Symbol.DOUHAO, names);
	}

	public static String addLog(String base, String log) {
		if (StringUtils.isEmpty(base)) return addBase(log);

		String[] arrStr = new String[] { base, addBase(log) };

		String str = join(Symbol.DOUHAO, arrStr);

		return str;
	}

	public static String addLog(String base, String[] param) {
		String str = StringUtils.EMPTY;

		for (int i = 0; i < param.length; i++)
			str = addLog(str, param[i]);

		return base + str;
	}
	
	private static String addBase(String log) {

		String[] tmpStr = new String[] { log, "{}" };
		String str = join(Symbol.SEMI_COLON, tmpStr);

		return str;
	}

	public static String getLogName(String className) {
		int tmp = className.lastIndexOf(Symbol.PERIOD);
		if (tmp < 1) return StringUtils.EMPTY;

		String str = className.substring(tmp + 1) + Symbol.SPLIT;

		if (className.indexOf("usrcore") > 0) {
			str += LogConstants.PROJ_USRLAYER;
		} else if (className.indexOf("phonegate") > 0) {
			str += LogConstants.PROJ_DPHONEGATE;
		} else if (className.indexOf("epcore") > 0) {
			str += LogConstants.PROJ_DEPGATE;
		} else if (className.indexOf("cooperate") > 0) {
			str += LogConstants.PROJ_LIB_COOPERATE;
		} else {
			str += LogConstants.PROJ_LIB_ECCOMMON;
		}

		return str;
	}

	public static void main(String[] args){
		System.out.print(getLogName(StringUtil.class.getName()));
	}

	private static String join(CharSequence charsequence,
			CharSequence acharsequence[]) {
		Objects.requireNonNull(charsequence);
		Objects.requireNonNull(acharsequence);
		StringBuilder stringjoiner = new StringBuilder();
		CharSequence acharsequence1[] = acharsequence;
		int i = acharsequence1.length;
		for (int j = 0; j < i; j++) {
			CharSequence charsequence1 = acharsequence1[j];
			stringjoiner.append(charsequence1).append(charsequence);
		}
		if (stringjoiner.length() > 0) stringjoiner = stringjoiner.deleteCharAt(stringjoiner.length() - charsequence.length());
		return stringjoiner.toString();
	}

	@SuppressWarnings("rawtypes")
	private static String join(CharSequence charsequence, Iterable iterable) {
		Objects.requireNonNull(charsequence);
		Objects.requireNonNull(iterable);
		StringBuilder stringjoiner = new StringBuilder();
		CharSequence charsequence1 = StringUtils.EMPTY;
		for (Iterator iterator = iterable.iterator(); iterator.hasNext(); stringjoiner
				.append(charsequence1).append(charsequence))
			charsequence1 = (CharSequence) iterator.next();
		if (stringjoiner.length() > 0) stringjoiner = stringjoiner.deleteCharAt(stringjoiner.length() - charsequence.length());
		return stringjoiner.toString();
	}
}
