package com.usrgate.net.server;

import io.netty.channel.Channel;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.netCore.util.ByteUtil;
import com.usrgate.net.client.PhoneClient;
import com.usrgate.net.sender.PhoneMessageSender;
import com.usrgate.protocol.PhoneConstant;
import com.usrgate.protocol.PhoneProtocol;
import com.usrgate.protocol.StreamUtil;
import com.usrgate.service.CacheService;
import com.usrgate.service.PhoneService;
import com.usrgate.utils.DateUtil;


/**
 * 接受客户端数据并处理
 * @author lwz
 * 2015.10.11
 */
public class PhoneMessageHandler{
	
	private static final Logger logger = LoggerFactory.getLogger(PhoneMessageHandler.class);
	
	
	public static void handleMessage(Channel channel, PhoneMessage message) throws  IOException
	{
		PhoneClient phoneClient = CacheService.getPhoneClientByChannel(channel);
		if(phoneClient==null)
		{
			logger.error("handleMessage error! not find PhoneClient:"+channel.toString());
			return ;
		}
   	 
		int cmd = message.getCmd();
		if(!PhoneService.isValidCmd(cmd))
		{
			logger.error("handleMessage error! invalid cmd:{},{}",cmd,phoneClient);
			return ;
		}

		ByteBuffer byteBuffer = ByteBuffer.wrap(message.getBytes());
		int msgLen = message.getBytes().length;
		
		switch (cmd) 
		{
			case PhoneConstant.D_CONNET_EP:// 1 连接充电桩
			case PhoneConstant.D_NEW_CONNET_EP:
			{
				
				byte[] bcode = new byte[16];
				byteBuffer.get(bcode);
				String epCode =  new String(bcode);
				
				// 2 充电枪编号
				int epGunNo = (int)byteBuffer.get();
				
				// 3 用户ID号
				long accountid = byteBuffer.getLong();
				
				byte[] bCheckCode = new byte[32];
				byteBuffer.get(bCheckCode);
				
				String checkCode = new String(bCheckCode);
				
				int version=(cmd==1)?1:2;
				
				PhoneService.handleConnectEp(channel,(int)accountid,epCode,epGunNo,checkCode,version);
			}
			break;
		
             case PhoneConstant.D_START_CHARGE://10 充电
			 {
				if (msgLen != 8) {
					 byte[] data = PhoneProtocol.do_confirm(PhoneConstant.D_START_CHARGE, (byte)0, (short)0);
			         PhoneMessageSender.sendMessage(channel, data);
					 break;
				}
				phoneClient.setLastUseTime(DateUtil.getCurrentSeconds());
				//1 冻结金额
				int fronzeAmt = byteBuffer.getInt();
				//2 充电方式
				short chargeType = byteBuffer.getShort();
				
				PhoneService.handleStartCharge(phoneClient,fronzeAmt,chargeType);
			 }
			 break;
			 
             case PhoneConstant.D_HEART://2 心跳
             {
            	 phoneClient.setLastUseTime(DateUtil.getCurrentSeconds());
            	 PhoneService.handleHeart(phoneClient);
     			
             }
             break;
             case PhoneConstant.D_STOP_CHARGE://11停止
			 {
				 if (msgLen != 3) {
					 byte[] data = PhoneProtocol.do_confirm(PhoneConstant.D_STOP_CHARGE, (byte)0, (short)0);
			         PhoneMessageSender.sendMessage(channel, data);
					 break;
				}
				 phoneClient.setLastUseTime(DateUtil.getCurrentSeconds());
				
				PhoneService.handleStopCharge(phoneClient);
			 }
			 break;
             
			 default:
			 break;
		  }
	}
}
   

