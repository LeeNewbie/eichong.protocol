package com.third.service;

import io.netty.channel.Channel;

import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.netCore.core.pool.TaskPoolFactory;
import com.third.config.GameConfig;
import com.third.net.client.EpCommClient;
import com.third.net.codec.EpGateEncoder;
import com.third.net.constant.Third2EpGate;
import com.third.net.sender.EpGateSender;
import com.third.task.CheckEpGateCommClientTask;
import com.third.utils.DateUtil;

public class EpGateService {
	
	private static final Logger logger = LoggerFactory.getLogger(EpGateService.class);
	
	
	public static boolean isValidCmd(int cmd)
	{
		if( 
		cmd == Third2EpGate.EP_LOGIN||
		cmd == Third2EpGate.EP_HEART||
		cmd == Third2EpGate.EP_UNIT_REMOTE||
		cmd == Third2EpGate.EP_TWO_REMOTE||
		cmd == Third2EpGate.EP_TELEMETRY||
		cmd == Third2EpGate.EP_LONGER_TELEMETRY||
		cmd == Third2EpGate.EP_CONSUME_RECORD)
			return true;
		return false;
		
	}
	
	public static Map<Channel,EpCommClient> mapChannel2Client = new ConcurrentHashMap<Channel, EpCommClient>();
	
	public static EpCommClient getCommClientByChannel(Channel ch)
	{
		return mapChannel2Client.get(ch);
	}
	
	 public static void removeChannel(Channel ch)
	 {
			
		EpCommClient commClient = mapChannel2Client.get(ch);
		if(commClient != null)
		{
			logger.debug("mapChannel2Client,size:{}",mapChannel2Client.size());
			mapChannel2Client.remove(ch);
			logger.debug("mapChannel2Client,size:{}",mapChannel2Client.size());
		}
	}
	 
	public static String getDebugInfo()
	{
		final StringBuilder sb = new StringBuilder();
		sb.append("EpCommClientService:\n");
		
        sb.append("mapChannel2Client count:").append(mapChannel2Client.size()).append("\n");
        
        return sb.toString();
		
	}
	 
	 public static void addCommClient(EpCommClient commClient)
	 {
		 logger.debug("addCommClient:{}",commClient);
		 if(commClient==null)
				return;
		Channel ch = commClient.getChannel();
		if( ch ==null)
			return ;
		logger.debug("addCommClient ch:{}",ch);
		mapChannel2Client.put(ch, commClient);
		 
	 }

	private static Map<String ,Map<Integer,Object>> mapRealData = new ConcurrentHashMap<String, Map<Integer,Object>>();
	
	public static Map<Integer,Object> getRealData(String key)
	{
		return mapRealData.get(key);
	}

	public static void addRealData(String key, Map<Integer,Object> pointMap)
	{
		mapRealData.put(key, pointMap);	
	}
	 
	public static void removeRealData(String key)
	{
		mapRealData.remove(key);
	}
	
	/**
	 * 心跳（thirdServer->EPGate）
	 */
	public static void sendHeart(Channel channel){
		logger.info("thirdServer send heart channel:{}",channel);
		
		byte[] reqData = EpGateEncoder.heart();

		EpGateSender.sendMessage(channel, reqData);
	}
	
	/**
	 * 网关登录应答（thirdServer->EPGate）
	 */
	public static void sendLogin(Channel channel,int epGateId){
		logger.info("thirdServer send login epGateId:{}",epGateId);
		
		byte[] reqData = EpGateEncoder.login(epGateId);

		EpGateSender.sendMessage(channel, reqData);
	}

	/**
	 * 心跳（EPGate->thirdServer）
	 */
	public static void handleHeart(Channel channel){
		logger.info("thirdServer receive heart");
		
		setLastUseTime(channel);
	}

	/**
	 * EPGate最新响应时间设置
	 */
	private static void setLastUseTime(Channel channel){
		EpCommClient epGateClient = getCommClientByChannel(channel);
		if (epGateClient == null) return;

		epGateClient.setLastUseTime(DateUtil.getCurrentSeconds());
	}
		
	/**
	 * 电桩下线
	 * @author 
	 * 2014-12-1
	 * @param channel
	 */
	public static void offLine(Channel channel)
	{
		//获得电桩信息
		EpCommClient commClient =  getCommClientByChannel(channel);
		
		if (commClient != null) {
			
			//handleNetTimeOut(channel,commClient.getIdentity());
			commClient.setStatus(0);
		}
			
	}
	
	public static void startCommTimeout(long initDelay) {
		
		CheckEpGateCommClientTask checkTask =  new CheckEpGateCommClientTask();
				
		TaskPoolFactory.scheduleAtFixedRate("CHECK_COMMCLIENT_TIMEOUT_TASK", checkTask, initDelay, 10, TimeUnit.SECONDS);
	}

	public static void checkCommTimeout()
	{
		logger.debug("EpGateService checkTimeOut,mapCh2PhoneClient.size():{}",mapChannel2Client.size());
		Iterator iter = mapChannel2Client.entrySet().iterator();
		int count=0;
		while (iter.hasNext()) {
			Map.Entry entry = (Map.Entry) iter.next();
			EpCommClient commClient=(EpCommClient) entry.getValue();	
			if(null == commClient)
			{
				continue;
			}
		
			long now = DateUtil.getCurrentSeconds();			
			long diff = now-commClient.getLastUseTime();
			
			if(diff>GameConfig.closeInterval)
			{ 
				count++;
				logger.debug("EpGateService:checkTimeOut[diff:{},lastUseTime{}], remove phoneClient:{}",
						new Object[]{diff,commClient.getLastUseTime(),commClient});
				
				commClient.setStatus(0);
				Channel ch = commClient.getChannel();
				
				if(ch!=null )
				{
					ch.close();
				}	
				iter.remove();
				continue;
			}
		
			now = DateUtil.getCurrentSeconds();
			//1.检查连接是否活动,不活动的话发送心跳侦
			long activeDiff = now - commClient.getLastSendTime();
			if (activeDiff >= GameConfig.heartInterval) {
				commClient.setLastSendTime(now);
				if(commClient.getChannel() != null)
				{
					sendHeart(commClient.getChannel());
				}
			}
		}
		if(count>0)
		{
			logger.info("EpCommClient Client communication had {} time out !",count);
		}
		
	}
	
}
