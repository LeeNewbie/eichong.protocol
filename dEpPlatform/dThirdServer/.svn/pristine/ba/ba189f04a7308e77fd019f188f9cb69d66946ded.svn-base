package com.third.epconsumer;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import net.sf.json.JSONObject;

import org.apache.commons.lang.RandomStringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.fastjson.JSON;
import com.third.config.GameConfig;
import com.third.constant.BaseConstant;
import com.third.constant.EpProtocolConstant;
import com.third.net.constant.Third2EpGate;
import com.third.protocol.UtilProtocol;
import com.third.service.EpGateService;
import com.third.utils.DateUtil;
import com.third.utils.RequestUtil;

public class StopCarOrganService  {
	
	private static final Logger logger = LoggerFactory.getLogger(StopCarOrganService.class);
	

	public static long getTimeStamp()
	{
		return System.currentTimeMillis();
	}
	
    private static final String DateFmt = "yyyy-MM-dd HH:mm:ss";
	
	private static String getFmtTime(int time)
	{
		java.util.Date date = new Date(time*1000);
		
		return DateUtil.toDateFormat(date, DateFmt); 
	}
	
	public static int changeWorkStatus(int epWorkStatus)
	{
		int workStatus=4;
		if(epWorkStatus==EpProtocolConstant.EP_GUN_W_STATUS_OFF_LINE)
			workStatus = 4; //离线
		else if(epWorkStatus==EpProtocolConstant.EP_GUN_W_STATUS_WORK)
			workStatus = 3; //工作
		else if(epWorkStatus==EpProtocolConstant.EP_GUN_W_STATUS_FAULT||
				epWorkStatus>EpProtocolConstant.EP_GUN_W_INIT)
			workStatus = 1;//故障
		else
			workStatus = 2;//空闲
		
		return workStatus;
	}
	
	private static int getFaultCode(Map<Integer,Object> singleMap, Map<Integer,Object> doubleMap, int epWorkStatus, String currentType)
	{
		int faultCode = 7;
		if (epWorkStatus==EpProtocolConstant.EP_GUN_W_STATUS_URGENT_STOP)
			faultCode = 0;
		else if (epWorkStatus==EpProtocolConstant.EP_GUN_W_STATUS_METER_FAULT)
			faultCode = 1;
		else if (epWorkStatus==EpProtocolConstant.EP_GUN_W_STATUS_CONTACTOR_FAULT)
			faultCode = 2;
		else if (epWorkStatus==EpProtocolConstant.EP_GUN_W_STATUS_INSULATION_FAULT)
			faultCode = 6;

		if (1 == (int)singleMap.get(EpProtocolConstant.YX_1_CARD_READER_FAULT)) faultCode = 3;
		if (1 == (int)doubleMap.get(EpProtocolConstant.YX_2_CHARGE_OVER_TEMP)) faultCode = 4;
		if (currentType.equals(EpProtocolConstant.EP_DC_TYPE) && 1 == (int)doubleMap.get(EpProtocolConstant.YX_2_OUT_LINKER_STATUS)) faultCode = 5;

		return faultCode;
	}	

	/**
	 * 3充电桩充电记录
	 */
	public static void realData(String key)
	{
		Map<Integer,Object> pointMap = EpGateService.getRealData(key);
		if (pointMap == null || pointMap.size() == 0) return;
		
		String partnerKey = GameConfig.scoCfg.getPartnerKey();
		String partnerId = GameConfig.scoCfg.getPartnerId();
		String baseUri = GameConfig.scoCfg.getBaseUrl()+GameConfig.scoCfg.getStatusMethod();

		//参数转换
		String[] val = key.split(BaseConstant.ESCAPE + BaseConstant.SPLIT);
		String statusTime= getFmtTime((int)pointMap.get(0));
		key = val[0] + BaseConstant.SPLIT + val[1] + BaseConstant.SPLIT + val[2] + BaseConstant.SPLIT + Third2EpGate.EP_UNIT_REMOTE;
		Map<Integer,Object> singleMap = EpGateService.getRealData(key);
		key = val[0] + BaseConstant.SPLIT + val[1] + BaseConstant.SPLIT + val[2] + BaseConstant.SPLIT + Third2EpGate.EP_TWO_REMOTE;
		Map<Integer,Object> doubleMap = EpGateService.getRealData(key);
		
		HashMap<String,Object> paramsMap=new HashMap<String,Object>();
        //运营服务商标识
		paramsMap.put("operatorId", partnerId);
		// 1.充电桩编码poleId字符串由平台提前注册接入	
		paramsMap.put("equipNo", val[0]);
		// 2.充电枪编码gunNo字符串由平台提前注册接入
		paramsMap.put("gunNo", val[1]);
		// 3.工作状态
		int workStatus = changeWorkStatus((int)pointMap.get(EpProtocolConstant.YC_WORKSTATUS));
		paramsMap.put("chargepoleStatus", workStatus);
		// 4.枪口连接状态	
		paramsMap.put("gunConnStatus", singleMap.get(EpProtocolConstant.YX_1_LINKED_CAR));
		// 5.故障代码，0:急停故障, 1:电表故障，2:接触器故障，3:读卡器故障 ，4:内部过温故障，5:连接器故障，6:绝缘故障，7:其他
		paramsMap.put("faultCode", getFaultCode(singleMap, doubleMap, (int)pointMap.get(EpProtocolConstant.YC_WORKSTATUS), val[2]));
		// 6.状态时间参照yyyy-MM-dd HH:mm:ss
		paramsMap.put("statusTime", statusTime);
		// 7.输入侧A相电压（6位小数位）
		paramsMap.put("voltA", pointMap.get(EpProtocolConstant.YC_A_VOL));
		// 8.输入侧B相电压（6位小数位）
		paramsMap.put("voltB", pointMap.get(EpProtocolConstant.YC_B_VOL));
		// 9.输入侧C相电压（6位小数位）
		paramsMap.put("voltC", pointMap.get(EpProtocolConstant.YC_C_VOL));
		// 10.输入侧A相电流（6位小数位）
		paramsMap.put("curA", pointMap.get(EpProtocolConstant.YC_A_CURRENT));
		// 10.输入侧B相电流（6位小数位）
		paramsMap.put("curB", pointMap.get(EpProtocolConstant.YC_B_CURRENT));
		// 11.输入侧C相电流（6位小数位）
		paramsMap.put("curC", pointMap.get(EpProtocolConstant.YC_C_CURRENT));
		// 11.输入有功功率（6位小数位）
		paramsMap.put("power", new BigDecimal(0.0));
		// 12.充电机输出电压（6位小数位）
		paramsMap.put("volt", pointMap.get(EpProtocolConstant.YC_OUT_VOL));
		// 13.充电机输出电流（6位小数位）
		paramsMap.put("cur", pointMap.get(EpProtocolConstant.YC_OUT_CURRENT));
		String sSoc="";
		if (val[2].equals(EpProtocolConstant.EP_DC_TYPE)) {
			sSoc = "" + pointMap.get(EpProtocolConstant.YC_SOC);
		}
		// 14.车辆SOC
		paramsMap.put("soc", sSoc);
		// 15.剩余充电时长
		paramsMap.put("restTime", pointMap.get(EpProtocolConstant.YC_REMAIN_TIME));
		ArrayList list = new ArrayList();
		list.add(paramsMap);
		HashMap<String,Object> paramsMapTemp=new HashMap<String,Object>();
		paramsMapTemp.put("data", list);
		JSONObject jsonObject = JSONObject.fromObject(paramsMapTemp);
		

		String timestamp = ""+ getTimeStamp();		
		String token= RandomStringUtils.randomAlphanumeric(16);
		String toSign = jsonObject.toString()+"#"+ token + "#" + timestamp;
	    String sign = ApiSecurityUtils.encrypt(toSign, partnerKey, ApiSecurityUtils.HS256);
		
		HashMap<String,Object>  params=new HashMap<String,Object>();
		params.put("partnerId", partnerId);
		params.put("timestamp", timestamp);
		params.put("token", token);
		params.put("input", jsonObject.toString());
		params.put("sign", sign);
		
		logger.debug("thirdServer realData!baseUri:{},paramsMap:{}",baseUri,params);
		
	   
    	String res = RequestUtil.doPost(baseUri, params);
    	Map<String,Object> ret = (HashMap<String,Object>)JSON.parse(res);
    	if ((int)ret.get("ret") != 0) logger.debug("thirdServer sco realData ret:{}",ret);

    	logger.debug("thirdServer sco realData res:{}",res);
	}
	
	/**
	 * 3充电桩充电记录
	 */
	public static void chargeRecord(String key)
	{
		Map<Integer,Object> pointMap = EpGateService.getRealData(key);
		if (pointMap == null || pointMap.size() == 0) return;

		String partnerKey = GameConfig.scoCfg.getPartnerKey();
		String partnerId = GameConfig.scoCfg.getPartnerId();
		String baseUri = GameConfig.scoCfg.getBaseUrl()+GameConfig.scoCfg.getChargeMethod();
	    
		//参数转换
		String[] val = key.split(BaseConstant.ESCAPE + BaseConstant.SPLIT);
		String startTime= getFmtTime((int)pointMap.get(2));
		String endTime =getFmtTime((int)pointMap.get(3));
	
		HashMap<String,Object>  paramsMap=new HashMap<String,Object>();
        // 运营服务商标识
		paramsMap.put("operatorId",partnerId);
		// 1.充电桩编码
		paramsMap.put("equipNo", val[0]);
		// 2.充电枪编码gunNo字符串由平台提前注册接入
		paramsMap.put("gunNo", val[1]);
		// 3.充电量meterNumFLOAT单位度 (小数点后3位 )	
		String meterNum = (UtilProtocol.intToBigDecimal2((int)pointMap.get(4))).toString();
		paramsMap.put("pq", meterNum);
		// 4.开始时间startTime字符串参照yyyy-MM-dd HH:mm:ss
		paramsMap.put("startTime", startTime);
		// 5.结束时间endTime字符串参照yyyy-MM-dd HH:mm:ss
		paramsMap.put("endTime", endTime);
		ArrayList list = new ArrayList();
		list.add(paramsMap);
		HashMap<String,Object>  paramsMapTemp=new HashMap<String,Object>();
		paramsMapTemp.put("data", list);
		JSONObject jsonObject = JSONObject.fromObject(paramsMapTemp);
		
		
		String timestamp = ""+ getTimeStamp();
		String token= RandomStringUtils.randomAlphanumeric(16);
		logger.debug("input:{}",jsonObject.toString());
		
		String toSign =jsonObject.toString()+"#"+ token + "#" + timestamp;	
		String sign = ApiSecurityUtils.encrypt(toSign, partnerKey, ApiSecurityUtils.HS256);
	
		HashMap<String,Object>  params=new HashMap<String,Object>();
		params.put("partnerId", partnerId);
		params.put("timestamp", timestamp);
		params.put("token", token);
		params.put("input", jsonObject.toString());
		params.put("sign", sign);
			
	    logger.debug("thirdServer chargeRecord!baseUri:{},paramsMap:{}",baseUri,params);
    	String res = RequestUtil.doPost(baseUri, params);
    
    	logger.debug("thirdServer sco chargeRecord res:{}",res);
	}
	
	public static void main(String[] args) {
		
	/*	valid=1;
		serverIp="121.40.18.116";
		//serverIp="hzskynet.i91pv.com";
		//serverPort=55555;
		serverPort=8888;
		partnerId="310000002";
		partnerKey="tlDYWr1WtNvIyDFI";
		sendRealDataCyc=60;
		baseUrl = "https://"+serverIp+":"+serverPort;
		statusMethod="/api/pipe/status";
		chargeMethod="/api/pipe/charge-records";
		
		StopCarOrganService.realData("3301021010000009", 1, 2, 0, 0, 1470817277, 
		new BigDecimal(220.1), new BigDecimal(220.2), new BigDecimal(220.3), new BigDecimal(1.1), 
		new BigDecimal(1.2),new BigDecimal(1.3), new BigDecimal(50), new BigDecimal(380.0), 
		new BigDecimal(40.0), 65, 50);
		
		
		StopCarOrganService.chargeRecord("3301021010000009", 1,new BigDecimal(111.2),
				1467012163,1467012178);
		*/
		
	}
	
}
